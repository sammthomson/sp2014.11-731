#!/usr/bin/env python

import argparse
import os, sys, tempfile
import subprocess
import json

try:
  creg = os.environ['CREG']
except KeyError:
  sys.stderr.write('Please set the environment variable CREG to point to the creg binary.\n')
  sys.exit(1)

if not os.access(creg, os.X_OK):
  sys.stderr.write('Cannot execute %s\nPlease check your CREG environment variable.\n' % creg)
  sys.exit(1)

def vsub(a,b):
  a = a.copy()
  for k, v in b.iteritems():
    if k in a:
      a[k] -= v
    else:
      a[k] = -v
  return a

def neg(a):
  a = a.copy()
  for k,v in a.iteritems():
    a[k] = -v
  return a

argparser = argparse.ArgumentParser(prog='fit')
argparser.add_argument('-2', '--l2', dest='l2', default=0.0, help='L2 regularization strength')
argparser.add_argument('-x', '--pairs', dest='pairs', default='data/en-cs.pairs', help='Reference-Hypothesis pairs')
argparser.add_argument('-y', '--labels', dest='labels', default='data/en-cs.train.labels', help='Reference-H1-H2-Judgement labels')

args = argparser.parse_args()

sys.stderr.write('Loading ref/hyp features...\n')
# load features extracted for each ref/hyp pair
drh = {}
for (ref_hyp, fmap) in zip(open(args.pairs), sys.stdin):
  drh[ref_hyp.rstrip()] = json.loads(fmap)

# load training judgements
sys.stderr.write('Loading training judgements...\n')
f = tempfile.NamedTemporaryFile(delete=False)
featsfile = f.name
r = tempfile.NamedTemporaryFile(delete=False)
respfile = r.name
lc = 1
nofeats = 0
for line in open(args.labels):
  (ref,h1,h2,y) = line.rstrip().split(' ||| ')
  ref_h1 = ref + ' ||| ' + h1
  ref_h2 = ref + ' ||| ' + h2
  y = int(y)
  try:
    fmap = vsub(drh[ref_h1], drh[ref_h2])
    label1 = 'A' + str(lc)
    label2 = 'B' + str(lc)
    f.write('%s\t%s\n' % (label1, json.dumps(neg(fmap))))
    r.write('%s\t%d\n' % (label1, y + 1))
    f.write('%s\t%s\n' % (label2, json.dumps(fmap)))
    r.write('%s\t%d\n' % (label2, 1 - y))
  except KeyError:
    nofeats += 1
  lc += 1
f.close()
r.close()
sys.stderr.write('Processed %d training instances (missing features for %d of them).\n' % (lc, nofeats))

cmd = [creg,'-x',featsfile,'-y',respfile,'-o','--l2',str(args.l2)]
sys.stderr.write('Fitting model parameters:\n%s\n' % str(cmd))
process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
out,err = process.communicate()
lines = out.split('\n')
firstline = lines[0].split('\t')
if firstline[1:] != ['***ORDINAL***', '0', '1', '2']:
  sys.stderr.write('Unexpected output in creg file!\n')
  sys.exit(1)
os.unlink(featsfile)
os.unlink(respfile)

sys.stderr.write('Learned boundaries: %s\nWriting learned coefficients.\n' % str(lines[1:3]))
weights = {}
for k_v in lines[3:]:
  k_v = k_v.rstrip()
  if len(k_v) > 2:
    k,v = k_v.split('\t')
    weights[k] = float(v)

print json.dumps(weights)


