#!/usr/bin/env python

import argparse
import os
import sys
import tempfile
import subprocess
import json
try:
    creg = os.environ['CREG']
except KeyError:
    raise EnvironmentError('Please set the environment variable CREG to point to the creg binary.\n')
if not os.access(creg, os.X_OK):
    raise EnvironmentError('Cannot execute %s\nPlease check your CREG environment variable.\n' % creg)

DELIMITER = ' ||| '


def vsub(a, b):
    """ sparse vector subtraction """
    a = a.copy()
    for k, v in b.iteritems():
        if k in a:
            a[k] -= v
        else:
            a[k] = -v
    return a


def neg(a):
    """ sparse vector negation """
    return {k: -v for k, v in a.iteritems()}


if __name__ == "__main__":
    argparser = argparse.ArgumentParser(prog='fit')
    argparser.add_argument('-2', '--l2', dest='l2', default=0.0, help='L2 regularization strength')
    argparser.add_argument('-x', '--pairs', dest='pairs', default='data/en-cs.pairs', help='Reference-Hypothesis pairs')
    argparser.add_argument('-y', '--labels', dest='labels', default='data/en-cs.train.labels',
                           help='Reference-H1-H2-Judgement labels')

    args = argparser.parse_args()

    sys.stderr.write('Loading ref/hyp features...\n')
    # load features extracted for each ref/hyp pair
    drh = {}
    for (ref_hyp, feature_map) in zip(open(args.pairs), sys.stdin):
        drh[ref_hyp.rstrip()] = json.loads(feature_map)

    # load training judgements
    sys.stderr.write('Loading training judgements...\n')
    f = tempfile.NamedTemporaryFile(delete=False)
    features_file = f.name
    r = tempfile.NamedTemporaryFile(delete=False)
    resp_file = r.name
    lc = 1
    num_feats = 0
    for line in open(args.labels):
        (ref, h1, h2, y) = line.rstrip().split(DELIMITER)
        ref_h1 = ref + DELIMITER + h1
        ref_h2 = ref + DELIMITER + h2
        y = int(y)
        try:
            feature_map = vsub(drh[ref_h1], drh[ref_h2])
            label1 = 'A' + str(lc)
            label2 = 'B' + str(lc)
            f.write('%s\t%s\n' % (label1, json.dumps(neg(feature_map))))
            r.write('%s\t%d\n' % (label1, y + 1))
            f.write('%s\t%s\n' % (label2, json.dumps(feature_map)))
            r.write('%s\t%d\n' % (label2, 1 - y))
        except KeyError:
            num_feats += 1
        lc += 1
    f.close()
    r.close()
    sys.stderr.write('Processed %d training instances (missing features for %d of them).\n' % (lc, num_feats))

    cmd = [creg, '-x', features_file, '-y', resp_file, '-o', '--l2', str(args.l2)]
    sys.stderr.write('Fitting model parameters:\n%s\n' % str(cmd))
    process = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    out, err = process.communicate()
    lines = out.split('\n')
    first_line = lines[0].split('\t')
    if first_line[1:] != ['***ORDINAL***', '0', '1', '2']:
        raise IOError('Unexpected output in creg file!\n')
    os.unlink(features_file)
    os.unlink(resp_file)

    sys.stderr.write('Learned boundaries: %s\nWriting learned coefficients.\n' % str(lines[1:3]))
    weights = {}
    for k_v in lines[3:]:
        k_v = k_v.rstrip()
        if len(k_v) > 2:
            k, v = k_v.split('\t')
            weights[k] = float(v)

    print json.dumps(weights)
